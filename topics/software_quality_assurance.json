{
  "topic": "Software Quality Assurance",
  "questions": [
    {
      "question": "What is software quality assurance?",
      "answer": "Software Quality Assurance (SQA) is a set of activities aimed at ensuring the correctness and quality of the software. It works in parallel with software development and involves reviews, audits, testing, and risk management.",
      "tags": [
        "SQA"
      ]
    },
    {
      "question": "Why is program slicing useful?",
      "answer": "Program slicing is useful for debugging, maintenance, and program understanding as it isolates statements that affect the execution of a specific criterion, making analysis more focused and efficient.",
      "tags": [
        "Program Slicing"
      ]
    },
    {
      "question": "How does mutation-based fault localization work?",
      "answer": "Mutation-based fault localization introduces defects (mutants) into the program and assesses how test cases interact with these mutants. Faulty locations are inferred from mutants killed by failing tests.",
      "tags": [
        "Fault Localization"
      ]
    },
    {
      "question": "What is the difference between backward slicing and forward slicing?",
      "answer": "Backward slicing identifies statements that can influence a given criterion, while forward slicing identifies statements that can be influenced by the criterion. Both use program dependency graphs for analysis.",
      "tags": [
        "Program Slicing"
      ]
    },
    {
      "question": "What is the role of data flow analysis in software testing?",
      "answer": "Data flow analysis tracks the flow of values between statements in a program to identify dependencies, potential bugs, or optimization opportunities. It is crucial for ensuring correctness and reliability.",
      "tags": [
        "Data Flow Analysis"
      ]
    },
    {
      "question": "Why is correctness considered relative in software development?",
      "answer": "Correctness is relative because it depends on the specifications of the intended behavior. A program is considered correct if its implementation aligns consistently with these explicit or implicit specifications.",
      "tags": [
        "Correctness"
      ]
    },
    {
      "question": "How does static analysis differ from dynamic analysis?",
      "answer": "Static analysis examines the program's behavior without executing it, focusing on safety properties and correctness. Dynamic analysis observes the program during execution, focusing on runtime behavior and bugs.",
      "tags": [
        "Dependency Analysis"
      ]
    },
    {
      "question": "What makes AutoFL an innovative fault localization technique?",
      "answer": "AutoFL uses Large Language Models (LLMs) to not only locate faults but also explain their root causes. It overcomes LLM context limitations by allowing autonomous navigation of code repositories.",
      "tags": [
        "AutoFL"
      ]
    },
    {
      "question": "How does the Tarantula algorithm calculate suspiciousness scores?",
      "answer": "Tarantula assigns a suspiciousness score to program statements based on the proportion of failing tests that execute a statement relative to the total tests that execute it, assisting fault localization.",
      "tags": [
        "Fault Localization"
      ]
    },
    {
      "question": "What are the key advantages of using program dependence graphs (PDGs) for slicing?",
      "answer": "PDGs enable efficient slicing by representing data and control dependencies as a graph, allowing for straightforward reachability analysis to identify relevant program statements for a slicing criterion.",
      "tags": [
        "Dependency Analysis"
      ]
    },
    {
      "question": "What is a fault in software?",
      "answer": "A fault is a defect in the software that causes an incorrect value or behavior, such as an uninitialized variable or an incorrect calculation.",
      "tags": [
        "Fault Localization"
      ]
    },
    {
      "question": "Why do we need software analysis?",
      "answer": "Software analysis helps ensure that the software behaves correctly, meets its requirements, and is free from bugs by using techniques, methods, and tools.",
      "tags": [
        "Software Analysis"
      ]
    },
    {
      "question": "How does static analysis work?",
      "answer": "Static analysis examines the program's code without running it, checking for errors like null-pointer dereferences or data overflows.",
      "tags": [
        "Dependency Analysis"
      ]
    },
    {
      "question": "What is program slicing?",
      "answer": "Program slicing extracts parts of the code that directly affect a specific computation, making debugging and understanding easier.",
      "tags": [
        "Program Slicing"
      ]
    },
    {
      "question": "What is the purpose of fault localization?",
      "answer": "Fault localization identifies the parts of the code that cause bugs, helping developers fix issues faster.",
      "tags": [
        "Fault Localization"
      ]
    },
    {
      "question": "What is mutation testing?",
      "answer": "Mutation testing introduces small changes (mutants) to code and evaluates whether tests can detect these changes to ensure robust test coverage.",
      "tags": [
        "Mutation Testing"
      ]
    },
    {
      "question": "Why is AutoFL special?",
      "answer": "AutoFL combines fault localization with explanations, using language models to identify and explain bugs in natural language.",
      "tags": [
        "AutoFL"
      ]
    },
    {
      "question": "What is the difference between testing and static analysis?",
      "answer": "Testing runs the program with different inputs to find bugs, while static analysis checks the code without running it to find potential issues.",
      "tags": [
        "Testing",
        "Dependency Analysis"
      ]
    },
    {
      "question": "How is dynamic slicing different from static slicing?",
      "answer": "Dynamic slicing considers the actual program execution to identify relevant statements, while static slicing considers all possible executions.",
      "tags": [
        "Program Slicing"
      ]
    },
    {
      "question": "What is the role of control flow graphs?",
      "answer": "Control flow graphs represent the flow of control in a program using nodes and edges, helping analyze program behavior and dependencies.",
      "tags": [
        "Dependency Analysis"
      ]
    },
    {
      "question": "How is a bug different from a fault?",
      "answer": "A bug is an observed error in software behavior, while a fault is the code defect causing the bug.",
      "tags": [
        "Fault Localization"
      ]
    },
    {
      "question": "What is the main goal of software quality assurance?",
      "answer": "The goal of SQA is to ensure software is correct, reliable, and meets quality standards through testing, reviews, and risk management.",
      "tags": [
        "SQA"
      ]
    },
    {
      "question": "Why are data flow dependencies important?",
      "answer": "Data flow dependencies show how data moves between program statements, helping find bugs and optimize the program.",
      "tags": [
        "Dependency Analysis"
      ]
    },
    {
      "question": "What is the difference between backward and forward slicing?",
      "answer": "Backward slicing identifies what affects a given point in the program, while forward slicing identifies what the given point affects.",
      "tags": [
        "Program Slicing"
      ]
    },
    {
      "question": "How does the Tarantula algorithm work?",
      "answer": "The Tarantula algorithm calculates how suspicious each statement is based on how often it is executed in failing versus passing tests.",
      "tags": [
        "Fault Localization"
      ]
    },
    {
      "question": "Why do we need interprocedural slicing?",
      "answer": "Interprocedural slicing analyzes dependencies across multiple functions or methods, helping debug complex programs.",
      "tags": [
        "Dependency Analysis"
      ]
    },
    {
      "question": "What is the difference between control dependence and data dependence?",
      "answer": "Control dependence shows how one statement's execution depends on another, while data dependence shows how data flows between statements.",
      "tags": [
        "Dependency Analysis"
      ]
    },
    {
      "question": "What is an example of a dynamic slicing tool?",
      "answer": "A dynamic slicing tool example is TAO, which analyzes Java bytecode traces to find execution-specific slices.",
      "tags": [
        "Dependency Analysis"
      ]
    },
    {
      "question": "What is the purpose of program dependence graphs?",
      "answer": "Program dependence graphs represent data and control dependencies in a program to simplify slicing and analysis.",
      "tags": [
        "Dependency Analysis"
      ]
    },
    {
      "question": "What is spectrum-based fault localization?",
      "answer": "Spectrum-based fault localization identifies suspicious code by comparing the execution traces of passing and failing tests.",
      "tags": [
        "Fault Localization"
      ]
    }
  ]
}