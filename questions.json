[
  {
    "topic": "Methodologies for Large-Scale Development",
    "questions": [
      {
        "question": "What are the core values of SAFe?",
        "answer": "The core values of SAFe are Alignment, Built-in Quality, Transparency, and Program Execution. These values help organizations stay focused, maintain quality, and improve communication.",
        "tags": ["SAFe"]
      },
      {
        "question": "How does SAFe address scaling challenges?",
        "answer": "SAFe uses four levels: Team, Program, Large Solution, and Portfolio. Key practices include Agile Release Trains (ARTs) for coordination and Program Increment (PI) Planning for alignment.",
        "tags": ["SAFe"]
      },
      {
        "question": "What are the main differences between SAFe and LeSS?",
        "answer": "SAFe has a structured, hierarchical approach with multiple levels and roles. LeSS focuses on simplicity, decentralization, and uses one Product Backlog and one Product Owner.",
        "tags": ["Comparison"]
      },
      {
        "question": "How does SAFe ensure team alignment?",
        "answer": "SAFe ensures alignment through Agile Release Trains (ARTs), Program Increment (PI) Planning, and synchronized planning across all teams.",
        "tags": ["SAFe"]
      },
      {
        "question": "How do teams coordinate in LeSS?",
        "answer": "Teams in LeSS coordinate using a single Product Backlog, Sprint Planning 1 for alignment, Sprint Planning 2 for team-specific tasks, and Scrum of Scrums.",
        "tags": ["LeSS"]
      },
      {
        "question": "What are the challenges of adopting SAFe?",
        "answer": "Challenges include complexity, resistance to change, and high upfront costs. These can be addressed with strong leadership, training, and starting with a pilot Agile Release Train (ART).",
        "tags": ["SAFe"]
      },
      {
        "question": "How does LeSS maintain team autonomy?",
        "answer": "LeSS maintains autonomy by allowing teams to self-organize during Sprint Planning 2 while aligning on shared goals in Sprint Planning 1. Teams communicate directly and avoid hierarchy.",
        "tags": ["LeSS"]
      },
      {
        "question": "What are the key success factors for adopting SAFe?",
        "answer": "Key success factors include leadership support, training, clear roles, effective Program Increment (PI) Planning, and starting with a pilot Agile Release Train (ART).",
        "tags": ["SAFe"]
      },
      {
        "question": "What is SAFe?",
        "answer": "SAFe stands for Scaled Agile Framework. It is a framework to help large organizations apply Agile at scale across multiple teams and levels.",
        "tags": ["SAFe"]
      },
      {
        "question": "What is the main purpose of LeSS?",
        "answer": "LeSS, or Large-Scale Scrum, is used to scale Scrum for large organizations while keeping it simple and decentralized.",
        "tags": ["LeSS"]
      }
    ]
  },
  {
    "topic": "Methodologies for Distributed Development",
    "questions": [
      {
        "question": "What is distributed software development (DSD)?",
        "answer": "DSD involves software development by teams located in different geographical areas, either within the same country or across countries.",
        "tags": ["DSD"]
      },
      {
        "question": "Why is distributed development significant in modern software engineering?",
        "answer": "It allows access to a global talent pool, reduces costs, and supports specialized development needs, but poses challenges like communication gaps and coordination issues.",
        "tags": ["significance", "challenges"]
      },
      {
        "question": "How does cultural distance affect distributed software development?",
        "answer": "Cultural distance can cause misunderstandings and conflicts in team interactions, impacting productivity and collaboration.",
        "tags": ["cultural distance"]
      },
      {
        "question": "What are the differences between co-located and distributed Agile practices?",
        "answer": "Co-located practices emphasize face-to-face communication, while distributed practices rely on digital tools and structured communication methods to manage geographical separation.",
        "tags": ["comparison", "Agile"]
      },
      {
        "question": "How does the 'Follow the Sun' model enhance productivity in distributed teams?",
        "answer": "The model utilizes time zone differences to maintain continuous development cycles, reducing project timelines.",
        "tags": ["productivity"]
      },
      {
        "question": "What challenges arise in communication within distributed teams?",
        "answer": "Challenges include language barriers, time zone differences, and the lack of non-verbal communication cues.",
        "tags": ["communication"]
      },
      {
        "question": "Why are daily Scrums critical in distributed Agile development?",
        "answer": "Daily Scrums promote transparency, help identify impediments early, and encourage continuous communication across distributed teams.",
        "tags": ["Scrum"]
      },
      {
        "question": "How can organizations mitigate risks in global software engineering?",
        "answer": "Organizations can mitigate risks by improving communication, using robust collaboration tools, and fostering trust through frequent visits and shared goals.",
        "tags": ["risk mitigation"]
      },
      {
        "question": "What are the benefits of frequent visits in distributed teams?",
        "answer": "Frequent visits enhance trust, improve understanding of project goals, and foster stronger interpersonal relationships.",
        "tags": ["trust", "visits"]
      },
      {
        "question": "How do synchronized sprints improve distributed Agile performance?",
        "answer": "Synchronized sprints ensure all teams follow the same timeline, which enhances coordination and reduces integration issues.",
        "tags": ["sprints"]
      },
      {
        "question": "What is the primary goal of distributed development methodologies?",
        "answer": "To facilitate efficient software development across geographically dispersed teams while addressing challenges like communication, coordination, and cultural differences.",
        "tags": ["goal"]
      },
      {
        "question": "Why is trust important in distributed software development?",
        "answer": "Trust fosters collaboration, reduces conflicts, and enhances team cohesion, which are critical for the success of distributed projects.",
        "tags": ["trust"]
      },
      {
        "question": "How do temporal and geographic distances impact distributed development?",
        "answer": "Temporal distances affect scheduling and synchronous collaboration, while geographic distances complicate physical interaction and increase reliance on digital tools.",
        "tags": ["distances"]
      },
      {
        "question": "What are common tools used for collaboration in distributed teams?",
        "answer": "Tools like Jira for task management, Slack for communication, Zoom for meetings, and Git for version control are commonly used to facilitate collaboration.",
        "tags": ["tools"]
      },
      {
        "question": "How does Distributed Scrum differ from traditional Scrum?",
        "answer": "Distributed Scrum adapts practices like daily stand-ups, sprint planning, and reviews to virtual environments using communication tools and often involves synchronized sprints across time zones.",
        "tags": ["Scrum"]
      },
      {
        "question": "What are the advantages of using Agile methodologies in distributed development?",
        "answer": "Agile methodologies enhance adaptability, promote continuous feedback, and encourage collaboration even in distributed setups, improving project outcomes.",
        "tags": ["Agile"]
      },
      {
        "question": "Why is knowledge sharing critical in distributed software engineering?",
        "answer": "Effective knowledge sharing prevents rework, reduces misunderstandings, and ensures all team members have access to crucial information.",
        "tags": ["knowledge sharing"]
      },
      {
        "question": "What is the role of a Scrum Master in a distributed team?",
        "answer": "A Scrum Master facilitates communication, removes impediments, and ensures Agile practices are effectively implemented across distributed locations.",
        "tags": ["Scrum Master"]
      },
      {
        "question": "How do distributed teams manage work-life balance challenges?",
        "answer": "Teams manage work-life balance by synchronizing work hours, respecting time zones, and implementing flexible schedules.",
        "tags": ["work-life balance"]
      },
      {
        "question": "What is a 'proxy customer' in distributed Agile development?",
        "answer": "A proxy customer acts as an intermediary between the development team and the actual customer, making decisions and providing feedback when direct interaction is challenging.",
        "tags": ["proxy customer"]
      },
      {
        "question": "How do you ensure quality in distributed development?",
        "answer": "Quality is ensured through practices like continuous integration, automated testing, regular code reviews, and adherence to a clear definition of 'done.'",
        "tags": ["quality"]
      },
      {
        "question": "What is the 'OneTeam' model in distributed Scrum?",
        "answer": "The OneTeam model integrates distributed teams into a unified structure, emphasizing synchronized goals, shared responsibilities, and a common product backlog.",
        "tags": ["OneTeam"]
      },
      {
        "question": "What are the key metrics to evaluate distributed team performance?",
        "answer": "Key metrics include velocity, defect rates, code quality, and team satisfaction, adapted to the distributed context.",
        "tags": ["metrics"]
      },
      {
        "question": "How does cultural diversity affect distributed software development?",
        "answer": "Cultural diversity can bring innovation but also challenges like miscommunication, differing work styles, and conflicts, which need to be managed effectively.",
        "tags": ["culture"]
      },
      {
        "question": "What is the role of frequent visits in distributed development?",
        "answer": "Frequent visits help build trust, improve collaboration, and provide opportunities for face-to-face interaction, which strengthens team dynamics.",
        "tags": ["visits"]
      },
      {
        "question": "What are the main challenges in distributed software development?",
        "answer": "Challenges include communication gaps, cultural differences, coordination issues, and maintaining quality across distributed teams.",
        "tags": ["challenges"]
      },
      {
        "question": "How can organizations overcome communication barriers in distributed teams?",
        "answer": "Using multiple communication tools, establishing clear protocols, and promoting regular interactions help overcome communication barriers.",
        "tags": ["communication"]
      },
      {
        "question": "Why is alignment of time zones critical in distributed teams?",
        "answer": "Alignment ensures overlapping work hours, enabling real-time collaboration and quicker issue resolution.",
        "tags": ["time zones"]
      },
      {
        "question": "How can distributed teams handle knowledge loss due to turnover?",
        "answer": "Effective documentation, knowledge sharing sessions, and mentoring programs can mitigate knowledge loss from turnover.",
        "tags": ["knowledge loss"]
      },
      {
        "question": "How does the use of sprint retrospectives benefit distributed teams?",
        "answer": "Sprint retrospectives enable teams to reflect on processes, identify improvement areas, and adapt practices to distributed challenges.",
        "tags": ["retrospectives"]
      }
    ]
  }
]
